
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 7.0.1.ZXO6KTL8YME/iyM+Km9vV+5Vl3uCg38fo9BAI8Huhdo=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable annotations
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_27fe83881fc949fd884f9f71065dd214
    {
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Color32 Clone(global::UnityEngine.Color32 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Byte Clone(global::System.Byte item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Matrix4x4 Clone(global::UnityEngine.Matrix4x4 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Single Clone(global::System.Single item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Quaternion Clone(global::UnityEngine.Quaternion item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Vector2 Clone(global::UnityEngine.Vector2 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Vector3 Clone(global::UnityEngine.Vector3 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::UnityEngine.Vector4 Clone(global::UnityEngine.Vector4 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Unity.FlatSharpTests.Foo? Clone(global::Unity.FlatSharpTests.Foo? item)
        {
            checked
            {
                return item is null ? null : new Unity.FlatSharpTests.Foo(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<UnityEngine.Vector2>? Clone(global::System.Collections.Generic.IList<UnityEngine.Vector2>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<UnityEngine.Vector2>(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> Clone(global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> item)
        {
            checked
            {

                if (item.HasValue)
                {
                    return FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(item.Value);
                }

                return null;

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<System.Int32>? Clone(global::System.Collections.Generic.IList<System.Int32>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<System.Int32>(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> Clone(global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> item)
        {
            checked
            {

                if (item.HasValue)
                {
                    return FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(item.Value);
                }

                return null;

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Unity.Collections.NativeArray<UnityEngine.Vector2> Clone(global::Unity.Collections.NativeArray<UnityEngine.Vector2> item)
        {
            checked
            {
                return new Unity.Collections.NativeArray<UnityEngine.Vector2>(item, Unity.Collections.Allocator.Persistent);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Int32 Clone(global::System.Int32 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Unity.Collections.NativeArray<System.Int32> Clone(global::Unity.Collections.NativeArray<System.Int32> item)
        {
            checked
            {
                return new Unity.Collections.NativeArray<System.Int32>(item, Unity.Collections.Allocator.Persistent);
            }
        }
    }

}


namespace FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using Unity.FlatSharpTests;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::Unity.FlatSharpTests.Foo value)
        {
            checked
            {

                int runningSum = 35 + 13;
                var index0Value = value.vector2List;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.GetMaxSize(index0Value);
                }
                var index1Value = value.vector2NativeArray;

                if (!(index1Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.GetMaxSize(index1Value);
                }
                var index2Value = value.intList;

                if (!(index2Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.GetMaxSize(index2Value);
                }
                var index3Value = value.intNativeArray;

                if (!(index3Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.GetMaxSize(index3Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::Unity.FlatSharpTests.Foo value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(32, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[12];

                var index0Value = value.vector2List;
                var index1Value = value.vector2NativeArray;
                var index2Value = value.intList;
                var index3Value = value.intNativeArray;

                var index3Offset = tableStart;
                if (!(index3Value is null))
                {

                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index3Offset = currentOffset;
                    currentOffset += 4;

                    vtableLength = 12;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                var index2Offset = tableStart;
                if (!(index2Value is null))
                {

                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;


                    if (10 > vtableLength)
                    {
                        vtableLength = 10;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (!(index1Value is null))
                {

                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                    if (8 > vtableLength)
                    {
                        vtableLength = 8;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {

                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                    if (6 > vtableLength)
                    {
                        vtableLength = 6;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 32 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index3Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.Serialize(spanWriter, span, index3Value, index3Offset, context);

                }


                if (index2Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.Serialize(spanWriter, span, index2Value!, index2Offset, context);

                }


                if (index1Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.Serialize(spanWriter, span, index1Value, index1Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::Unity.FlatSharpTests.Foo Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_7bdd8c9c606e469dabe0985cc4dee930_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        private sealed class tableReader_7bdd8c9c606e469dabe0985cc4dee930_Lazy<TInputBuffer>
            : global::Unity.FlatSharpTests.Foo
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug

            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_7bdd8c9c606e469dabe0985cc4dee930_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_7bdd8c9c606e469dabe0985cc4dee930_Lazy<TInputBuffer>? item = new();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_7bdd8c9c606e469dabe0985cc4dee930_Lazy() : base(__CtorContext)
            {
                checked
                {
                }
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false)
            {
                checked
                { }
            }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Unity.FlatSharpTests.Foo);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#else
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<System.Int32>? intList
#else
            public override System.Collections.Generic.IList<System.Int32>? intList
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<UnityEngine.Vector2>? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2List);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2NativeArray);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.Int32>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intList);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<System.Int32>> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intNativeArray);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::Unity.FlatSharpTests.Foo Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_7bdd8c9c606e469dabe0985cc4dee930_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        private sealed class tableReader_7bdd8c9c606e469dabe0985cc4dee930_Progressive<TInputBuffer>
            : global::Unity.FlatSharpTests.Foo
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug

            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Collections.Generic.IList<UnityEngine.Vector2>? __index0Value;
            private System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> __index1Value;
            private System.Collections.Generic.IList<System.Int32>? __index2Value;
            private System.Nullable<Unity.Collections.NativeArray<System.Int32>> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_7bdd8c9c606e469dabe0985cc4dee930_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_7bdd8c9c606e469dabe0985cc4dee930_Progressive<TInputBuffer>? item = new();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_7bdd8c9c606e469dabe0985cc4dee930_Progressive() : base(__CtorContext)
            {
                checked
                {
                }
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false)
            {
                checked
                { }
            }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Unity.FlatSharpTests.Foo);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#else
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            this.__mask0 |= (byte)1;
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            this.__mask0 |= (byte)2;
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<System.Int32>? intList
#else
            public override System.Collections.Generic.IList<System.Int32>? intList
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            this.__mask0 |= (byte)4;
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)8) == 0)
                        {
                            this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            this.__mask0 |= (byte)8;
                        }
                        return this.__index3Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<UnityEngine.Vector2>? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2List);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2NativeArray);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.Int32>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intList);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<System.Int32>> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intNativeArray);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::Unity.FlatSharpTests.Foo Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_7bdd8c9c606e469dabe0985cc4dee930_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        private sealed class tableReader_7bdd8c9c606e469dabe0985cc4dee930_Greedy<TInputBuffer>
            : global::Unity.FlatSharpTests.Foo
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug

            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Collections.Generic.IList<UnityEngine.Vector2>? __index0Value;
            private System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> __index1Value;
            private System.Collections.Generic.IList<System.Int32>? __index2Value;
            private System.Nullable<Unity.Collections.NativeArray<System.Int32>> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_7bdd8c9c606e469dabe0985cc4dee930_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_7bdd8c9c606e469dabe0985cc4dee930_Greedy<TInputBuffer>? item = new();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_7bdd8c9c606e469dabe0985cc4dee930_Greedy() : base(__CtorContext)
            {
                checked
                {
                }
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false)
            {
                checked
                { }
            }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Unity.FlatSharpTests.Foo);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#else
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<System.Int32>? intList
#else
            public override System.Collections.Generic.IList<System.Int32>? intList
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<UnityEngine.Vector2>? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2List);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2NativeArray);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.Int32>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intList);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<System.Int32>> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intNativeArray);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::Unity.FlatSharpTests.Foo Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_7bdd8c9c606e469dabe0985cc4dee930_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        private sealed class tableReader_7bdd8c9c606e469dabe0985cc4dee930_GreedyMutable<TInputBuffer>
            : global::Unity.FlatSharpTests.Foo
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug

            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Collections.Generic.IList<UnityEngine.Vector2>? __index0Value;
            private System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> __index1Value;
            private System.Collections.Generic.IList<System.Int32>? __index2Value;
            private System.Nullable<Unity.Collections.NativeArray<System.Int32>> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_7bdd8c9c606e469dabe0985cc4dee930_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_7bdd8c9c606e469dabe0985cc4dee930_GreedyMutable<TInputBuffer>? item = new();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_7bdd8c9c606e469dabe0985cc4dee930_GreedyMutable() : base(__CtorContext)
            {
                checked
                {
                }
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false)
            {
                checked
                { }
            }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Unity.FlatSharpTests.Foo);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#else
            public override System.Collections.Generic.IList<UnityEngine.Vector2>? vector2List
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> vector2NativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<System.Int32>? intList
#else
            public override System.Collections.Generic.IList<System.Int32>? intList
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#else
            public override System.Nullable<Unity.Collections.NativeArray<System.Int32>> intNativeArray
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index3Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<UnityEngine.Vector2>? ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2List);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.vector2NativeArray);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.Int32>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intList);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Nullable<Unity.Collections.NativeArray<System.Int32>> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6.intNativeArray);
                }
            }
        }


        private static class tableMetadata_6a1f879cf9cc45cb8043989ef211f4d6
        {

            public static readonly TableFieldContext vector2List = new TableFieldContext(
                "Unity.FlatSharpTests.Foo.vector2List",
                false,
                false);

            public static readonly TableFieldContext vector2NativeArray = new TableFieldContext(
                "Unity.FlatSharpTests.Foo.vector2NativeArray",
                false,
                false);

            public static readonly TableFieldContext intList = new TableFieldContext(
                "Unity.FlatSharpTests.Foo.intList",
                false,
                false);

            public static readonly TableFieldContext intNativeArray = new TableFieldContext(
                "Unity.FlatSharpTests.Foo.intNativeArray",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A
{
    internal class Serializer : IGeneratedSerializer<global::Unity.FlatSharpTests.Foo>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.0.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Unity.FlatSharpTests.Foo root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::Unity.FlatSharpTests.Foo root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::Unity.FlatSharpTests.Foo ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::Unity.FlatSharpTests.Foo ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::Unity.FlatSharpTests.Foo ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::Unity.FlatSharpTests.Foo ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.ND371942C460E0E7FFD1D44459AF902D822749FCB484DEDF02EF240891A696E16
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<UnityEngine.Vector2> value)
        {
            checked
            {
                return 10 + (8 * value.Count);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<UnityEngine.Vector2> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 8);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is UnityEngine.Vector2[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];


                        global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 8;
                    }
                }
                else if (value is List<UnityEngine.Vector2> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];


                        global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 8;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];


                        global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 8;
                    }
                }
            }
        }

        internal static global::System.Collections.Generic.IList<UnityEngine.Vector2> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return FlatBufferVectorBase<global::UnityEngine.Vector2, TInputBuffer, ItemAccessor_dbdb7c6abb1f406aa997cbef6e3eadbd<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_dbdb7c6abb1f406aa997cbef6e3eadbd<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Lazy);
            }
        }

        internal struct ItemAccessor_dbdb7c6abb1f406aa997cbef6e3eadbd<TInputBuffer> : IVectorItemAccessor<global::UnityEngine.Vector2, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_dbdb7c6abb1f406aa997cbef6e3eadbd(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 8;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::UnityEngine.Vector2 item)
            {
                checked
                {
                    int offset = this.offset + (8 * index);
                    item = global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::UnityEngine.Vector2 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (8 * index);
        }


        internal static global::System.Collections.Generic.IList<UnityEngine.Vector2> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return FlatBufferProgressiveVector<global::UnityEngine.Vector2, TInputBuffer, ItemAccessor_eb2b4a45d94445d8890b080b3e020510<TInputBuffer>>.GetOrCreate(FlatBufferVectorBase<global::UnityEngine.Vector2, TInputBuffer, ItemAccessor_eb2b4a45d94445d8890b080b3e020510<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_eb2b4a45d94445d8890b080b3e020510<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Progressive));
            }
        }

        internal struct ItemAccessor_eb2b4a45d94445d8890b080b3e020510<TInputBuffer> : IVectorItemAccessor<global::UnityEngine.Vector2, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_eb2b4a45d94445d8890b080b3e020510(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 8;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::UnityEngine.Vector2 item)
            {
                checked
                {
                    int offset = this.offset + (8 * index);
                    item = global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::UnityEngine.Vector2 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (8 * index);
        }


        internal static global::System.Collections.Generic.IList<UnityEngine.Vector2> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return ImmutableList<global::UnityEngine.Vector2>.GetOrCreate(FlatBufferVectorBase<global::UnityEngine.Vector2, TInputBuffer, ItemAccessor_ddd62b1a5ad94dcc9e737fa35c35467c<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_ddd62b1a5ad94dcc9e737fa35c35467c<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Greedy));
            }
        }

        internal struct ItemAccessor_ddd62b1a5ad94dcc9e737fa35c35467c<TInputBuffer> : IVectorItemAccessor<global::UnityEngine.Vector2, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_ddd62b1a5ad94dcc9e737fa35c35467c(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 8;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::UnityEngine.Vector2 item)
            {
                checked
                {
                    int offset = this.offset + (8 * index);
                    item = global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::UnityEngine.Vector2 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (8 * index);
        }


        internal static global::System.Collections.Generic.IList<UnityEngine.Vector2> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return PoolableList<global::UnityEngine.Vector2>.GetOrCreate(FlatBufferVectorBase<global::UnityEngine.Vector2, TInputBuffer, ItemAccessor_4e083be85f1f441b90a73d35d3ce6f10<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_4e083be85f1f441b90a73d35d3ce6f10<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable));
            }
        }

        internal struct ItemAccessor_4e083be85f1f441b90a73d35d3ce6f10<TInputBuffer> : IVectorItemAccessor<global::UnityEngine.Vector2, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_4e083be85f1f441b90a73d35d3ce6f10(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 8;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::UnityEngine.Vector2 item)
            {
                checked
                {
                    int offset = this.offset + (8 * index);
                    item = global::FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::UnityEngine.Vector2 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (8 * index);
        }

    }
}




namespace FlatSharp.Compiler.Generated.N8B4E618344A40F74DF63D5F8F2EA8225070542ED823FDC39764DA00C7B59A021
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> value)
        {
            checked
            {

                if (value.HasValue)
                {
                    return global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.GetMaxSize(value.Value);
                }

                return 0;

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.Serialize(spanWriter, span, value!.Value, offset, context);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.Parse_Lazy(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.Parse_Progressive(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.Parse_Greedy(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<UnityEngine.Vector2>> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth, fieldContext);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NE68D57F4496A1376D8E4DE70B038C329316EF710795CB9E1F471028AC54CDABA
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<System.Int32> value)
        {
            checked
            {
                return 10 + (4 * value.Count);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<System.Int32> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is System.Int32[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];


                        global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<System.Int32> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];


                        global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];


                        global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 4;
                    }
                }
            }
        }

        internal static global::System.Collections.Generic.IList<System.Int32> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return FlatBufferVectorBase<global::System.Int32, TInputBuffer, ItemAccessor_61cc642cc12f41d9ac16171edf8aceca<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_61cc642cc12f41d9ac16171edf8aceca<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Lazy);
            }
        }

        internal struct ItemAccessor_61cc642cc12f41d9ac16171edf8aceca<TInputBuffer> : IVectorItemAccessor<global::System.Int32, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_61cc642cc12f41d9ac16171edf8aceca(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 4;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::System.Int32 item)
            {
                checked
                {
                    int offset = this.offset + (4 * index);
                    item = global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::System.Int32 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (4 * index);
        }


        internal static global::System.Collections.Generic.IList<System.Int32> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return FlatBufferProgressiveVector<global::System.Int32, TInputBuffer, ItemAccessor_7c296f39d2114216891f400d1b5ac9e9<TInputBuffer>>.GetOrCreate(FlatBufferVectorBase<global::System.Int32, TInputBuffer, ItemAccessor_7c296f39d2114216891f400d1b5ac9e9<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_7c296f39d2114216891f400d1b5ac9e9<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Progressive));
            }
        }

        internal struct ItemAccessor_7c296f39d2114216891f400d1b5ac9e9<TInputBuffer> : IVectorItemAccessor<global::System.Int32, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_7c296f39d2114216891f400d1b5ac9e9(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 4;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::System.Int32 item)
            {
                checked
                {
                    int offset = this.offset + (4 * index);
                    item = global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::System.Int32 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (4 * index);
        }


        internal static global::System.Collections.Generic.IList<System.Int32> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return ImmutableList<global::System.Int32>.GetOrCreate(FlatBufferVectorBase<global::System.Int32, TInputBuffer, ItemAccessor_03a555903fa04901a48f99ac8f2599c2<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_03a555903fa04901a48f99ac8f2599c2<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.Greedy));
            }
        }

        internal struct ItemAccessor_03a555903fa04901a48f99ac8f2599c2<TInputBuffer> : IVectorItemAccessor<global::System.Int32, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_03a555903fa04901a48f99ac8f2599c2(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 4;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::System.Int32 item)
            {
                checked
                {
                    int offset = this.offset + (4 * index);
                    item = global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::System.Int32 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (4 * index);
        }


        internal static global::System.Collections.Generic.IList<System.Int32> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return PoolableList<global::System.Int32>.GetOrCreate(FlatBufferVectorBase<global::System.Int32, TInputBuffer, ItemAccessor_1700faf83bab4320a9efafd0b70f7b9e<TInputBuffer>>.GetOrCreate(
                    buffer,
                    new ItemAccessor_1700faf83bab4320a9efafd0b70f7b9e<TInputBuffer>(
                        offset + buffer.ReadUOffset(offset),
                        buffer),
                    remainingDepth,
                    fieldContext,
                    global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable));
            }
        }

        internal struct ItemAccessor_1700faf83bab4320a9efafd0b70f7b9e<TInputBuffer> : IVectorItemAccessor<global::System.Int32, TInputBuffer>
            where TInputBuffer : IInputBuffer
        {
            private readonly int offset;
            private readonly int count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ItemAccessor_1700faf83bab4320a9efafd0b70f7b9e(int offset, TInputBuffer buffer)
            {
                checked
                {
                    this.count = checked((int)buffer.ReadUInt(offset));

                    // Advance to the start of the element at index 0. Easiest to do this once
                    // in the .ctor than repeatedly for each index.
                    this.offset = checked(offset + sizeof(uint));
                }
            }

            public int ItemSize => 4;

            public int Count => this.count;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ParseItem(int index, TInputBuffer buffer, short remainingDepth, TableFieldContext fieldContext, out global::System.Int32 item)
            {
                checked
                {
                    int offset = this.offset + (4 * index);
                    item = global::FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void WriteThrough(int index, global::System.Int32 item, TInputBuffer inputBuffer, TableFieldContext context)
            {
                checked
                {
                    throw new NotMutableException("FlatBufferVector does not support mutation.");
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int OffsetOf(int index) => this.offset + (4 * index);
        }

    }
}




namespace FlatSharp.Compiler.Generated.N15384C0A301700B9588A644542CB4913E7CE4A7B0634D666386D2E5009B3332F
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> value)
        {
            checked
            {

                if (value.HasValue)
                {
                    return global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.GetMaxSize(value.Value);
                }

                return 0;

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.Serialize(spanWriter, span, value!.Value, offset, context);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.Parse_Lazy(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.Parse_Progressive(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.Parse_Greedy(buffer, offset, remainingDepth, fieldContext);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Nullable<Unity.Collections.NativeArray<System.Int32>> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return global::FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth, fieldContext);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N63FD5CB14FF003C753551A7307C3826077D090DBCD8701ABCE8BB95E4EC1B9E0
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Vector2 value)
        {
            checked
            {
                return 11;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Vector2 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector2>(8);
                Span<byte> sizedSpan = span.Slice(offset, 8);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Vector2 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector2>(8);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 8);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Vector2>(slice);

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N75E4320575311E1EA8053C24482AAAEF800DADDFDA901AF0218FEA38CCA994CB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using Unity.Collections;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::Unity.Collections.NativeArray<UnityEngine.Vector2> value)
        {
            checked
            {
                return 10 + (8 * value.Length);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::Unity.Collections.NativeArray<UnityEngine.Vector2> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.UnsafeWriteSpan(span, value.AsSpan(), offset, 4, context);
            }
        }

        internal static global::Unity.Collections.NativeArray<UnityEngine.Vector2> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                if (!buffer.IsPinned)
                    throw new NotSupportedException("Non-greedy parsing of a NativeArray requires a pinned buffer.");
                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::UnityEngine.Vector2>(offset);
                var nativeArray = Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtilityEx.ConvertExistingDataToNativeArray<global::UnityEngine.Vector2>(bufferSpan, Allocator.None);
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.SetAtomicSafetyHandle(ref nativeArray, Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempUnsafePtrSliceHandle());
#endif
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<UnityEngine.Vector2> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                if (!buffer.IsPinned)
                    throw new NotSupportedException("Non-greedy parsing of a NativeArray requires a pinned buffer.");
                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::UnityEngine.Vector2>(offset);
                var nativeArray = Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtilityEx.ConvertExistingDataToNativeArray<global::UnityEngine.Vector2>(bufferSpan, Allocator.None);
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.SetAtomicSafetyHandle(ref nativeArray, Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempUnsafePtrSliceHandle());
#endif
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<UnityEngine.Vector2> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::UnityEngine.Vector2>(offset);
                var nativeArray = new NativeArray<global::UnityEngine.Vector2>(bufferSpan.Length, Allocator.Persistent, NativeArrayOptions.UninitializedMemory);
                bufferSpan.CopyTo(nativeArray.AsSpan());
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<UnityEngine.Vector2> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::UnityEngine.Vector2>(offset);
                var nativeArray = new NativeArray<global::UnityEngine.Vector2>(bufferSpan.Length, Allocator.Persistent, NativeArrayOptions.UninitializedMemory);
                bufferSpan.CopyTo(nativeArray.AsSpan());
                return nativeArray;

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N1E4AF840DA947508D3AF090D2CC25201F558B3154B0351D91A6670A9ABEA40CB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Int32 value)
        {
            checked
            {
                return 7;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Int32 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteInt(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Int32 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadInt(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NB11DB33DEA8C692DD7A98459A80D8490DCF3036DEAADCA63006B8628B670856A
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using Unity.Collections;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::Unity.Collections.NativeArray<System.Int32> value)
        {
            checked
            {
                return 10 + (4 * value.Length);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::Unity.Collections.NativeArray<System.Int32> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.UnsafeWriteSpan(span, value.AsSpan(), offset, 4, context);
            }
        }

        internal static global::Unity.Collections.NativeArray<System.Int32> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                if (!buffer.IsPinned)
                    throw new NotSupportedException("Non-greedy parsing of a NativeArray requires a pinned buffer.");
                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::System.Int32>(offset);
                var nativeArray = Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtilityEx.ConvertExistingDataToNativeArray<global::System.Int32>(bufferSpan, Allocator.None);
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.SetAtomicSafetyHandle(ref nativeArray, Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempUnsafePtrSliceHandle());
#endif
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<System.Int32> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                if (!buffer.IsPinned)
                    throw new NotSupportedException("Non-greedy parsing of a NativeArray requires a pinned buffer.");
                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::System.Int32>(offset);
                var nativeArray = Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtilityEx.ConvertExistingDataToNativeArray<global::System.Int32>(bufferSpan, Allocator.None);
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.SetAtomicSafetyHandle(ref nativeArray, Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempUnsafePtrSliceHandle());
#endif
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<System.Int32> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::System.Int32>(offset);
                var nativeArray = new NativeArray<global::System.Int32>(bufferSpan.Length, Allocator.Persistent, NativeArrayOptions.UninitializedMemory);
                bufferSpan.CopyTo(nativeArray.AsSpan());
                return nativeArray;

            }
        }

        internal static global::Unity.Collections.NativeArray<System.Int32> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {


                var bufferSpan = buffer.UnsafeReadSpan<TInputBuffer, global::System.Int32>(offset);
                var nativeArray = new NativeArray<global::System.Int32>(bufferSpan.Length, Allocator.Persistent, NativeArrayOptions.UninitializedMemory);
                bufferSpan.CopyTo(nativeArray.AsSpan());
                return nativeArray;

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NCFA4E1D328DE890B0729499CC6DFD44622EA2719E2FA0454F61F6686B802FB45
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Single value)
        {
            checked
            {
                return 7;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Single value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteFloat(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Single Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadFloat(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NB7436535B9B9452337F3CDEB8806C542D46D17CE0815B32BF1228C108C816AED
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Color32 value)
        {
            checked
            {
                return 4;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Color32 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Color32>(4);
                Span<byte> sizedSpan = span.Slice(offset, 4);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Color32 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Color32>(4);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 4);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Color32>(slice);

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Byte value)
        {
            checked
            {
                return 1;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Byte value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteByte(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Byte Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadByte(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NEF380C7E6E44947D17CD58C2678C6CE176F2C5337F6E7B30D31D95E332EDC1C3
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Matrix4x4 value)
        {
            checked
            {
                return 67;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Matrix4x4 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Matrix4x4>(64);
                Span<byte> sizedSpan = span.Slice(offset, 64);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Matrix4x4 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Matrix4x4>(64);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 64);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Matrix4x4>(slice);

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N9A4A3B5E140DEF4DA4B0CAD2EE759108DFF8AE67F735AE6CD12D30A697C13EBE
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Quaternion value)
        {
            checked
            {
                return 19;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Quaternion value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Quaternion>(16);
                Span<byte> sizedSpan = span.Slice(offset, 16);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Quaternion Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Quaternion>(16);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 16);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Quaternion>(slice);

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N39B30BC115252C0C974E10D98A40AB432D0D0AB3E9B8BE0E02E08B75FEA6A778
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Vector3 value)
        {
            checked
            {
                return 15;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Vector3 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector3>(12);
                Span<byte> sizedSpan = span.Slice(offset, 12);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Vector3 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector3>(12);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 12);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Vector3>(slice);

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NF48752E320C680381A7101E4739BB4A4BB12D0910A8E6BFE2BD16E7A4B086EBE
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using UnityEngine;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::UnityEngine.Vector4 value)
        {
            checked
            {
                return 19;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::UnityEngine.Vector4 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector4>(16);
                Span<byte> sizedSpan = span.Slice(offset, 16);
                global::System.Runtime.InteropServices.MemoryMarshal.Write(sizedSpan, ref value);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::UnityEngine.Vector4 Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                FlatSharpInternal.AssertLittleEndian();
                FlatSharpInternal.AssertSizeOf<global::UnityEngine.Vector4>(16);
                var slice = buffer.GetReadOnlySpan().Slice(offset, 16);
                return global::System.Runtime.InteropServices.MemoryMarshal.Read<global::UnityEngine.Vector4>(slice);

            }
        }
    }
}



namespace Unity.FlatSharpTests
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Foo
        : object
        , IFlatBufferSerializable<Unity.FlatSharpTests.Foo>
        , IFlatBufferSerializable
    {
        static Foo()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public Foo()
        {
            checked
            {
                this.vector2List = default!;
                this.vector2NativeArray = default!;
                this.intList = default!;
                this.intNativeArray = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Foo(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public Foo(Foo source)
        {
            checked
            {
                this.vector2List = FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(source.vector2List);
                this.vector2NativeArray = FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(source.vector2NativeArray);
                this.intList = FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(source.intList);
                this.intNativeArray = FlatSharp.Compiler.Generated.CloneHelpers_27fe83881fc949fd884f9f71065dd214.Clone(source.intNativeArray);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual IList<UnityEngine.Vector2>? vector2List { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual Unity.Collections.NativeArray<UnityEngine.Vector2>? vector2NativeArray { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual IList<int>? intList { get; set; }

        [FlatBufferItemAttribute(3)]
        public virtual Unity.Collections.NativeArray<int>? intNativeArray { get; set; }
        public static ISerializer<Unity.FlatSharpTests.Foo> Serializer { get; } = new FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<Unity.FlatSharpTests.Foo>)this).Serializer;
        ISerializer<Unity.FlatSharpTests.Foo> IFlatBufferSerializable<Unity.FlatSharpTests.Foo>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<Unity.FlatSharpTests.Foo> IFlatBufferSerializable<Unity.FlatSharpTests.Foo>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<Unity.FlatSharpTests.Foo> IFlatBufferSerializable<Unity.FlatSharpTests.Foo>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<Unity.FlatSharpTests.Foo> IFlatBufferSerializable<Unity.FlatSharpTests.Foo>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<Unity.FlatSharpTests.Foo> IFlatBufferSerializable<Unity.FlatSharpTests.Foo>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.ND1AAE99160216E2386613A93655A4498A3700461713F3028E173B5494393BF3A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

